// Generated by CoffeeScript 1.10.0
(function() {
  var RGB, color, toPrecision,
    slice = [].slice;

  window.Color = (function() {
    Color.HEX_REGEX = /#(?:[a-f\d]{3}){1,2}\b/;

    Color.RGB_REGEX = /rgb\((?:(?:\s*0*(?:25[0-5]|2[0-4]\d|1?\d?\d)\s*,){2}\s*0*(?:25[0-5]|2[0-4]\d|1?\d?\d)|\s*0*(?:100(?:\.0+)?|\d?\d(?:\.\d+)?)%(?:\s*,\s*0*(?:100(?:\.0+)?|\d?\d(?:\.\d+)?)%){2})\s*\)/;

    Color.HSL_REGEX = /hsl\(\s*0*(?:360|3[0-5]\d|[12]?\d?\d)\s*(?:,\s*0*(?:100(?:\.0+)?|\d?\d(?:\.\d+)?)%?\s*){2}\)/;

    Color.getFormat = function(value) {
      if (value != null) {
        switch (false) {
          case !value.match(Color.HSL_REGEX):
            return 'hsl';
          case !value.match(Color.RGB_REGEX):
            return 'rgb';
          case !value.match(Color.HEX_REGEX):
            return 'hex';
        }
      }
    };

    Color.stringToRGB = function(rgb) {
      var b, g, r, ref;
      if (!rgb.match(Color.RGB_REGEX)) {
        return;
      }
      ref = rgb.match(/rgb\((.+?)\)/)[1].split(',').map(function(value) {
        value.trim();
        return parseInt(value);
      }), r = ref[0], g = ref[1], b = ref[2];
      return new RGB(r, g, b);
    };

    Color.rgbToString = function(rgb) {
      var b, g, r;
      r = rgb.r, g = rgb.g, b = rgb.b;
      return "rgb(" + r + "," + g + "," + b + ")";
    };

    Color.hexToRGB = function(hex) {
      var rgb;
      if (!hex.match(Color.HEX_REGEX)) {
        return;
      }
      hex = hex.replace('#', '');
      if (hex.length === 3) {
        hex += hex;
      }
      rgb = hex.match(/.{1,2}/g).map(function(val) {
        return parseInt(val, 16);
      });
      return new RGB(rgb[0], rgb[1], rgb[2]);
    };

    Color.rgbToHex = function(rgb) {
      var b, g, r, vals;
      r = rgb.r, g = rgb.g, b = rgb.b;
      vals = [rgb.r, rgb.g, rgb.b].map(function(value) {
        return ('0' + value.toString(16)).slice(-2);
      });
      return "#" + vals[0] + vals[1] + vals[2];
    };

    Color.hueToRGB = function(p, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p + (q(-p)) * (2 / 3 - t) * 6;
      }
      return p;
    };

    Color.hslToRGB = function(hsl) {
      var b, g, h, l, p, q, r, ref, s;
      if (!hsl.match(Color.HSL_REGEX)) {
        return;
      }
      ref = hsl.match(/hsl\((.+?)\)/)[1].split(',').map(function(value) {
        var numeric;
        value.trim();
        numeric = parseFloat(value);
        return numeric = value.indexOf('%') >= 0 ? numeric / 100 : numeric;
      }), h = ref[0], s = ref[1], l = ref[2];
      if (s === 0) {
        r = g = b = l;
      } else {
        q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        p = 2 * l - q;
        r = Color.hueToRGB(p, q, h + 1 / 3);
        g = Color.hueToRGB(p, q, h);
        b = Color.hueToRGB(p, q, h - 1 / 3);
      }
      return new RGB(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255));
    };

    Color.rgbToHsl = function(rgb) {
      var b, d, g, h, l, max, min, r, s;
      r = rgb.r, g = rgb.g, b = rgb.b;
      r /= 255;
      g /= 255;
      b /= 255;
      max = Math.max(r, g, b);
      min = Math.min(r, g, b);
      l = (max + min) / 2;
      if (max === min) {
        h = s = 0;
      } else {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
          case r:
            h = (g - b) / d + (g < b ? 6 : 0);
            break;
          case g:
            h = (b - r) / d + 2;
            break;
          case b:
            h = (r - g) / d + 4;
        }
        h /= 6;
      }
      return "hsl(" + (toPrecision(h, 2)) + "," + (Math.round(s * 100)) + "%," + (Math.round(s * 100)) + "%)";
    };

    Color.prototype.rgb = null;

    Color.prototype._setRGB = function(value) {
      return this.rgb = (function() {
        switch (Color.getFormat(value)) {
          case 'hex':
            return Color.hexToRGB(value);
          case 'rgb':
            return Color.stringToRGB(value);
          case 'hsl':
            return Color.hslToRGB(value);
          default:
            return new RGB(0, 0, 0);
        }
      })();
    };

    function Color() {
      var rest, value;
      value = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (value == null) {
        value = '#000000';
      }
      value = value.toString();
      this._setRGB(value);
      console.log(rest);
    }

    Color.prototype.get = function(property) {
      switch (property) {
        case 'hex':
          return Color.rgbToHex(this.rgb);
        case 'rgb':
          return Color.rgbToString(this.rgb);
        case 'hsl':
          return Color.rgbToHsl(this.rgb);
      }
    };

    Color.prototype.set = function() {
      var rest, value;
      value = arguments[0], rest = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return this._setRGB(value);
    };

    return Color;

  })();

  RGB = (function() {
    function RGB(r1, g1, b1) {
      this.r = r1 != null ? r1 : 0;
      this.g = g1 != null ? g1 : 0;
      this.b = b1 != null ? b1 : 0;
    }

    return RGB;

  })();

  toPrecision = function(number, precision) {
    return parseFloat(number.toPrecision(precision));
  };

  color = new Color('#45a5f5');

  window.onload = function() {
    console.log(color.get('hsl'));
    return document.getElementsByTagName('body')[0].style.backgroundColor = color.get('hsl');
  };

}).call(this);
